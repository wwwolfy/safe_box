{"version":3,"sources":["components/Button.js","components/ButtonList.js","components/Screen.js","App.js","serviceWorker.js","index.js"],"names":["Button","_ref","value","onPasswordInput","change","react_default","a","createElement","onClick","className","ButtonList","buttons","map","button","src_components_Button","key","Screen","_this$props","this","props","password","background","doorStatus","mainStatus","style","Component","App","state","url","serialNumber","serviceModeInput","passLength","idleTime","brightScreenTime","lockingUnlockingTime","errorRecoveryTime","statusEnum","locking","locked","unlocking","ready","validating","error","service","empty","doorEnum","unlocked","screenEnum","lightScreen","darkScreen","doorState","timer","finalPassword","screenLight","screenLightTimer","response","handleKeyboardInput","e","_this","backLightChange","test","console","log","serverValidation","code","axios","get","concat","then","setState","data","sn","setUnlockingStatus","setErrorStatus","catch","err","clearTimeout","setTimeout","pass","length","setLockingStatus","helper","resetInit","document","addEventListener","removeEventListener","src_components_Screen","src_components_ButtonList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.01f0a9d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Button.css\";\r\n\r\nconst Button = ({value, onPasswordInput, change}) =>{\r\n    return <button onClick={()=> {onPasswordInput(value); change();}} className=\"keyboard__button\">{value}</button>\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport Button from './Button';\r\nimport './ButtonList.css'\r\n\r\nconst ButtonList = ({onPasswordInput, change})=>{\r\n    const arr =[7,8,9,4,5,6,1,2,3,'*',0,'L'];\r\n    const buttons = arr.map(button=>{\r\n        return <Button key={button} change={change} onPasswordInput={onPasswordInput} value={button}/>\r\n    });\r\n    return(\r\n        <ul className=\"keyboard\">\r\n            {buttons}\r\n        </ul>\r\n    )\r\n};\r\nexport default ButtonList;","import React, { Component } from 'react';\r\nimport './Screen.css';\r\n\r\nclass Screen extends Component{\r\n\r\n    render(){\r\n        const {password, background, doorStatus, mainStatus} =this.props;\r\n        return(\r\n            <div className=\"screen\" style={{background: background}}>\r\n                <p className=\"screen__door-values\">\r\n                    {doorStatus}\r\n                </p>\r\n                <p className=\"screen__password\">\r\n                    {password}\r\n                </p>\r\n                <p className=\"screen__main-status\">\r\n                    {mainStatus}\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Screen;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport ButtonList from './components/ButtonList';\nimport Screen from './components/Screen'\nimport './App.css';\n\nclass App extends Component{\n    state={\n        // Constants:\n        url:'https://9w4qucosgf.execute-api.eu-central-1.amazonaws.com/default/CR-JS_team_M02a?',\n        serialNumber: '4815162342',\n        serviceModeInput: '000000',\n        passLength: 6,\n        idleTime: 1200,\n        brightScreenTime: 5000,\n        lockingUnlockingTime: 3000,\n        errorRecoveryTime: 2000,\n\n        statusEnum : {\n            locking: 'Locking...',\n            locked: 'Locked',\n            unlocking: 'Unlocking...',\n            ready: 'Ready',\n            validating: 'Validating...',\n            error: 'Error',\n            service: 'Service',\n            empty: ''\n        },\n\n        doorEnum : {\n            locked: 'Locked',\n            unlocked: 'Unlocked',\n        },\n\n        screenEnum : {\n            lightScreen: '#7fffff',\n            darkScreen: '#47b2b2'\n        },\n\n        // Variables:\n        password:'',\n        doorState: 'Unlocked',\n        timer : null,\n        finalPassword: '',\n        mainStatus:'',\n        screenLight: '#47b2b2',\n        screenLightTimer:null,\n        response:'',\n    };\n\n    componentDidMount(){\n        document.addEventListener(\"keypress\", this.handleKeyboardInput);\n    }\n    componentWillUnmount(){\n        document.removeEventListener(\"keypress\", this.handleKeyboardInput);\n    }\n\n    handleKeyboardInput= e=>{\n        this.backLightChange();\n        let key = (e.key==='l')? 'L': e.key;\n        const path = /^([0-9]|L|\\*)/;\n            if(path.test(key)){\n               this.onPasswordInput(key);\n            }else{\n                console.log('Press right key');\n            }\n    }\n    ;\n\n\n    //function that validates master code on server\n    serverValidation = (code) => {\n        axios.get(`${this.state.url}${code}`)\n            .then(response=>this.setState({response: response.data.sn},()=> {\n                if(this.state.response === this.state.serialNumber){\n                    this.setUnlockingStatus();\n                }else{\n                    this.setErrorStatus();\n                }\n            }))\n            .catch(err=>{\n                console.log(err);\n                this.setErrorStatus();\n            });\n    };\n\n    //turning light of and on\n    backLightChange =()=> {\n        clearTimeout(this.state.screenLightTimer);\n        this.setState({screenLight: this.state.screenEnum.lightScreen, screenLightTimer:setTimeout( ()=> {\n            if(this.state.mainStatus !== this.state.statusEnum.service){  //no turning of light when it is on service mode\n                this.setState({screenLight: this.state.screenEnum.darkScreen, mainStatus: this.state.statusEnum.empty});\n            }\n        }, this.state.brightScreenTime)});\n    };\n\n    //locking function - processes character by character of user input\n    locking = pass => {\n        if(this.state.finalPassword.length === this.state.passLength){\n            //if user types L after he entered 6 digit password, door will lock\n            if(pass === 'L'){\n                this.setLockingStatus();\n            }else{\n                // if it's not 'L' key, app will throw error status\n                this.setErrorStatus();\n                this.setState({finalPassword:''});\n            }\n        }else{\n            if(this.state.password !== ''){\n                // resetting timer after button is typed\n                clearTimeout(this.state.timer);\n            }\n\n            let helper = this.state.password + pass;\n\n            this.setState({\n                password: helper, timer: setTimeout( ()=> {\n                    if(this.state.finalPassword.length !== this.state.passLength){\n                        this.resetInit();\n                    }\n                }, this.state.idleTime)\n            }, ()=>{\n                // buttons * and L are not allowed in user password and password can't be \"000000\"\n                if(this.state.password.length === this.state.passLength) {\n                    // if password is finished, but last character is 'L' or '*':\n                    if(pass === '*' || pass === 'L' || this.state.password === this.state.serviceModeInput){\n                        this.setErrorStatus();\n                    }else{\n                        this.setState({finalPassword: this.state.password});\n                    }\n\n                }\n                else if(this.state.password.length > this.state.passLength){\n                    // If password is finished and doesn't end with 'L':\n                    if(pass !== 'L'){\n                        this.setErrorStatus();\n                    }\n                }\n                else{\n                    // If password is not finished yet and contains 'L' or '*':\n                    if(pass === '*'|| pass === 'L'){\n                        this.setErrorStatus();\n                    }\n                }\n            });\n        }\n\n    };\n\n    //unlocking function\n    unlocking = pass=>{\n        // if app is in service state\n        if(this.state.mainStatus === this.state.statusEnum.service){\n            clearTimeout(this.state.timer);\n            let helper = this.state.password + pass;\n            this.setState({\n                password: helper, timer: setTimeout(() => {\n                    this.setState({mainStatus: this.state.statusEnum.validating});\n                    this.serverValidation(this.state.password);\n                    this.resetInit();\n                }, this.state.idleTime)\n            });\n        }\n        else{\n            // Resetting timer if user is still typing\n            if(this.state.password !== ''){\n                clearTimeout(this.state.timer);\n            }\n            let helper = this.state.password + pass;\n            this.setState({\n                password: helper, timer: setTimeout(() => {\n                    this.resetInit();\n                }, this.state.idleTime)\n            }, () => {\n                if(this.state.password.length === this.state.passLength) {\n                    //unlocking if password is correct\n                    if(this.state.password === this.state.finalPassword){\n                        this.setUnlockingStatus();\n                    }else if(this.state.password === this.state.serviceModeInput){\n                        //entering service mode\n                        this.setState({mainStatus: this.state.statusEnum.service, password:''});\n                    }else{\n                        //error if password is incorrect\n                        this.setErrorStatus();\n                    }\n                }else if(this.state.password.length<this.state.passLength){\n                    if(pass === '*'|| pass === 'L'){\n                        // no L or * sign allowed in password\n                        this.setErrorStatus();\n                    }\n\n                }\n            });\n        }\n\n    };\n\n    //function which is called when user clicks on button\n    onPasswordInput = pass=>{\n        if(this.state.mainStatus !== this.state.statusEnum.service){\n            this.setState({mainStatus: this.state.statusEnum.ready});\n        }\n        if((this.state.mainStatus ===  this.state.statusEnum.ready || this.state.mainStatus==='') && this.state.doorState===this.state.doorEnum.unlocked){\n            this.locking(pass);\n        }else if((this.state.mainStatus ===  this.state.statusEnum.ready|| this.state.mainStatus ===  this.state.statusEnum.service || this.state.mainStatus === '') && this.state.doorState=== this.state.statusEnum.locked) {\n            this.unlocking(pass);\n        }\n    };\n\n    //resetting password and typing timer\n    resetInit = ()=>{\n        this.setState({password:'', timer:null});\n    };\n\n    //setting error status immediately, and after 2 sec setting ready state\n    setErrorStatus = ()=>{\n        this.setState({mainStatus: this.state.statusEnum.error, password:''});\n        setTimeout(()=>{\n            this.setState({mainStatus: this.state.statusEnum.ready});\n        },this.state.errorRecoveryTime);\n    };\n\n    // setting unlocking status, after 3 sec set door to unlock and resetting password\n    setUnlockingStatus = ()=> {\n        this.setState({mainStatus: this.state.statusEnum.unlocking});\n        setTimeout( ()=> {\n            this.setState({mainStatus: this.state.statusEnum.ready, doorState:this.state.doorEnum.unlocked, password:'', finalPassword:''});\n        },this.state.lockingUnlockingTime);\n    };\n\n    // setting locking status, after 3 sec set door to lock and resetting password\n    setLockingStatus = ()=>{\n        this.setState({mainStatus: this.state.statusEnum.locking});\n        setTimeout( ()=> {\n            this.setState({mainStatus: this.state.statusEnum.ready, doorState: this.state.doorEnum.locked, password:''});\n        }, this.state.lockingUnlockingTime);\n    };\n\n    render(){\n        return (\n            <div className=\"safe-box\">\n                <Screen doorStatus={this.state.doorState} mainStatus={this.state.mainStatus} background={this.state.screenLight} password={this.state.password}/>\n                <ButtonList change={this.backLightChange} onPasswordInput = {this.onPasswordInput}/>\n                <p className=\"safe-box__sn\">\n                    S/N: {this.state.serialNumber}\n                </p>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}